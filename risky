import yfinance as yf
import numpy as np

def calculate_risk(ticker, market_ticker='^GSPC', period='1y'):
    # Загрузка данных
    stock_data = yf.download(ticker, period=period)
    market_data = yf.download(market_ticker, period=period)

    # Расчет ежедневных доходностей
    stock_returns = stock_data['Adj Close'].pct_change().dropna()
    market_returns = market_data['Adj Close'].pct_change().dropna()

    # Стандартное отклонение (волатильность)
    volatility = np.std(stock_returns) * np.sqrt(252)

    # Бета-коэффициент
    covariance = np.cov(stock_returns, market_returns)[0, 1]
    market_variance = np.var(market_returns)
    beta = covariance / market_variance

    return volatility, beta

def is_risky(volatility, beta, volatility_threshold=0.3, beta_threshold=1.2):
    # Критерии для определения рисковости
    is_volatility_risky = volatility > volatility_threshold
    is_beta_risky = beta > beta_threshold

    if is_volatility_risky and is_beta_risky:
        return "Акция является рисковым активом"
    elif is_volatility_risky:
        return "Акция является рисковым активом из-за высокой волатильности"
    elif is_beta_risky:
        return "Акция является рисковым активом из-за высокого бета-коэффициента"
    else:
        return "Акция не является рисковым активом"


ticker = 'NVDA'
volatility, beta = calculate_risk(ticker)
risk_assessment = is_risky(volatility, beta)
print()
print(f"Волатильность акции {ticker}: {volatility:.2%}")
print(f"Бета-коэффициент акции {ticker}: {beta:.2f}")
print(risk_assessment)
